[{"title":"部署本地已经生成的Hexo博客到服务器记录","url":"https://penguinang.github.io/2017/10/04/成功部署到服务器记录/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。</p>\n<h3 id=\"1-安装Nginx\"><a href=\"#1-安装Nginx\" class=\"headerlink\" title=\"1.安装Nginx\"></a>1.安装Nginx</h3><p>我使用的是Ubuntu的服务器系统，所以直接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>\n<p>一步安装完成。安装之后使用<code>nginx</code>启动，然后打开你的域名或ip地址，如果有nginx的welcome之类的页面出现即说明安装成功。</p>\n<h3 id=\"2-修改Nginx配置\"><a href=\"#2-修改Nginx配置\" class=\"headerlink\" title=\"2.修改Nginx配置\"></a>2.修改Nginx配置</h3><p>在此处碰到了一个小坑。网上的其他教程在配置的时候都缺少一步—<strong>设置服务器上博客根目录</strong>的设定，我也是在此浪费了不少时间，直到看到<a href=\"http://www.360doc.com/content/16/0310/18/18578054_541110436.shtml\" target=\"_blank\" rel=\"external\">这篇本章</a>后才知道还有这一步。nginx的默认根目录位于<code>/var/www/</code>，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以<code>~/blog</code>为例。步骤如下：</p>\n<h5 id=\"1-建立根目录-blog，命令：\"><a href=\"#1-建立根目录-blog，命令：\" class=\"headerlink\" title=\"1.建立根目录~/blog，命令：\"></a>1.建立根目录<code>~/blog</code>，命令：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~</div><div class=\"line\">mkdir ~/blog</div></pre></td></tr></table></figure>\n<h5 id=\"2-修改nginx设置文件，命令：\"><a href=\"#2-修改nginx设置文件，命令：\" class=\"headerlink\" title=\"2.修改nginx设置文件，命令：\"></a>2.修改nginx设置文件，命令：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/sites-enabled/</div><div class=\"line\">sudo rm default</div><div class=\"line\">sudo cp ../sites-available/default ./hexo</div><div class=\"line\">sudo vim ./default</div></pre></td></tr></table></figure>\n<p>找到<code>root   /var/www/html</code>,修改为<code>root     /home/~/blog/blog</code>（此处<code>~</code>应换成你的博客根目录所在用户的名字，也即此目录是该用户的家目录）,修改完后保存即可<br>关于为什么是blog/blog而不是blog的问题，后面会有说明。原因大概的说就是使用git的hook功能，在~/blog下面放一个worktree和一个gitdir（blog.git）。<br>修改配置之后可以进行一下测验，比如在<code>blog/blog</code>下面写写一个简单的<code>index.html</code>文件，使用命令<code>nginx -s reload</code>让nginx重新加载配置文件，打开你的域名或ip地址，应该就可以看到你刚干创建的<code>index.html</code>文件。如果没有的话就是配置没有成功。</p>\n<h3 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h3><p>关于在自己的本地机器上安装Hexo，网上的教程很多，以我安装时的经验来看应该是没有什么大问题的</p>\n<h3 id=\"4-部署到服务器\"><a href=\"#4-部署到服务器\" class=\"headerlink\" title=\"4.部署到服务器\"></a>4.部署到服务器</h3><p>可能你已经有过将Hexo部署到github的经验，但是部署到服务器还是有些不一样的。大致步骤包括</p>\n<ul>\n<li>创建git裸仓库</li>\n<li>配置github hook</li>\n<li>配置服务器ssh公钥（可选）</li>\n<li>使用Hexo一键部署</li>\n</ul>\n<p>具体步骤为：</p>\n<h6 id=\"1-创建git裸仓库\"><a href=\"#1-创建git裸仓库\" class=\"headerlink\" title=\"1.创建git裸仓库\"></a>1.创建git裸仓库</h6><ol>\n<li>进入~/blog，<code>cd ~/blog</code></li>\n<li>创建裸仓库，<code>git init --bare blog.git</code><h6 id=\"2-配置hook\"><a href=\"#2-配置hook\" class=\"headerlink\" title=\"2.配置hook\"></a>2.配置hook</h6></li>\n<li>修改hooks，<code>vim blog.git/hooks/post-receive</code></li>\n<li>加入下面几行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">git --work-tree=/home/~/blog/blog --git-dir=/home/~/blog/blog.git checkout -f</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>，注意同样的<code>~</code>需要替换为相应用户名</p>\n<h6 id=\"3-配置ssh公钥\"><a href=\"#3-配置ssh公钥\" class=\"headerlink\" title=\"3.配置ssh公钥\"></a>3.配置ssh公钥</h6><p>ssh公钥主要是用于免密登录服务器，在这里可以用于免密部署。以我的理解，本机的私钥是独一无二，并且只有自己持有的，只有本机的私钥才能对应上本机的公钥，所以将本机的公钥放在服务器上，服务器会用公钥来检验登录者所用的私钥是否是本机的私钥，从而检验登录着是不是本机。具体步骤如下：</p>\n<ol>\n<li>在本机生成密钥对，如已有可跳过，<code>ssh-keygen</code>，一路确定,然后会在<code>~/.ssh/</code>下面有两个文件<code>id—rsa</code>和<code>id_rsa.pub</code>，前者私钥，后者公钥，私钥一定要保管好。</li>\n<li>登录服务器，在服务器blog根目录所在用户家目录创建<code>.ssh</code>文件，放入认证公钥，命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~</div><div class=\"line\">mkdir .ssh</div><div class=\"line\">vim authorized_keys</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>粘贴上你的本机生成的公钥，保存即可。</p>\n<h6 id=\"4-使用Hexo一键部署\"><a href=\"#4-使用Hexo一键部署\" class=\"headerlink\" title=\"4.使用Hexo一键部署\"></a>4.使用Hexo一键部署</h6><ol>\n<li>修改本机Hexo配置文件，命令：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">先进入Hexo根目录，这个因机器而异</div><div class=\"line\">vim _config.yml</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>找到deploy项，将repo改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git@138.68.18.64:/home/~/blog/blog.git</div></pre></td></tr></table></figure></p>\n<p>我这里用了ip地址，也可以修改为域名。<code>~</code>还是要修改为对应用户名。如果需要部署到多个网站，如既部署到自己的服务器，又部署到github，则可以改为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">repo:</div><div class=\"line\">    自己的网站名字: git@138.68.18.64:/home/~/blog/blog.git</div><div class=\"line\">    github: git@github.com:penguinang/penguinang.github.io.git</div></pre></td></tr></table></figure>\n<ol>\n<li><code>hexo d</code>，部署<br>到此，部署到服务器上就完成了。</li>\n</ol>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>如果有什么问题，欢迎大家留言提问或指正</p>\n","categories":[],"tags":["服务器学习"]},{"title":"first blog","url":"https://penguinang.github.io/2017/08/09/first-blog/","content":"<p>这是我的第一个在线博客</p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://penguinang.github.io/2017/08/09/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"辨析 Sass 中的 Map 和 List","url":"https://penguinang.github.io/2015/10/21/demo/","content":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>\n<a id=\"more\"></a>\n<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>\n<h2 id=\"测试表格\"><a href=\"#测试表格\" class=\"headerlink\" title=\"测试表格\"></a>测试表格</h2><table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>Sitewide information.</td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page specific information and custom variables set in front-matter.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Site configuration</td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>Theme configuration. Inherits from site configuration.</td>\n</tr>\n<tr>\n<td><code>_</code> (single underscore)</td>\n<td><a href=\"http://lodash.com/\" target=\"_blank\" rel=\"external\">Lodash</a> library</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path of current page</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Full URL of current page</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Environment variables</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法比较\"><a href=\"#语法比较\" class=\"headerlink\" title=\"语法比较\"></a>语法比较</h2><div class=\"note\"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>\n\n<h4 id=\"Map-语法\"><a href=\"#Map-语法\" class=\"headerlink\" title=\"Map 语法\"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-map: (</div><div class=\"line\">    small: (</div><div class=\"line\">        min-width: null,</div><div class=\"line\">        max-width: 479px,</div><div class=\"line\">        base-font: 16px,</div><div class=\"line\">        vertical-rhythm: 1.3</div><div class=\"line\">    ),</div><div class=\"line\">    medium: (</div><div class=\"line\">        min-width: 480px,</div><div class=\"line\">        max-width: 959px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.414</div><div class=\"line\">    ),</div><div class=\"line\">    large: (</div><div class=\"line\">        min-width: 960px,</div><div class=\"line\">        max-width: 1099px,</div><div class=\"line\">        base-font: 18px,</div><div class=\"line\">        vertical-rhythm: 1.5</div><div class=\"line\">    ),</div><div class=\"line\">    xlarge: (</div><div class=\"line\">        min-width: 1100px,</div><div class=\"line\">        max-width: null,</div><div class=\"line\">        base-font: 21px,</div><div class=\"line\">        vertical-rhythm: 1.618</div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h4 id=\"多重列表语法\"><a href=\"#多重列表语法\" class=\"headerlink\" title=\"多重列表语法\"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, null, 21px, 1.618)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"遍历比较\"><a href=\"#遍历比较\" class=\"headerlink\" title=\"遍历比较\"></a>遍历比较</h2><div class=\"note info\"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>\n\n<h4 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;&#125;</div></pre></td></tr></table></figure>\n<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>\n<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $map in $breakpoint-map &#123;</div><div class=\"line\">    $min-width: map-get($map, min-width);</div><div class=\"line\">    $max-width: map-get($map, max-width);</div><div class=\"line\">    $base-font: map-get($map, base-font);</div><div class=\"line\">    $vertical-rhythm: map-get($map, vertical-rhythm);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遍历多重列表\"><a href=\"#遍历多重列表\" class=\"headerlink\" title=\"遍历多重列表\"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>\n<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"慎用多重列表\"><a href=\"#慎用多重列表\" class=\"headerlink\" title=\"慎用多重列表\"></a>慎用多重列表</h2><div class=\"note warning\"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>\n\n<h4 id=\"遗漏键值\"><a href=\"#遗漏键值\" class=\"headerlink\" title=\"遗漏键值\"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$breakpoint-list: (</div><div class=\"line\">    (small, null, 479px, 16px, 1.3),</div><div class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</div><div class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</div><div class=\"line\">    (xlarge, 1100px, 21px, 1.618)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">p &#123;</div><div class=\"line\">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class=\"line\">        @if $min-width &#123;</div><div class=\"line\">            @include breakpoint( $min-width ) &#123;</div><div class=\"line\">                font-size: $base-font;</div><div class=\"line\">                line-height: $vertical-rhythm;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; @else &#123;</div><div class=\"line\">            font-size: $base-font;</div><div class=\"line\">            line-height: $vertical-rhythm;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>\n<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>\n<h4 id=\"查找特定列表\"><a href=\"#查找特定列表\" class=\"headerlink\" title=\"查找特定列表\"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$medium-map: map-get($maps, medium);</div></pre></td></tr></table></figure>\n<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@function get-list($label) &#123;</div><div class=\"line\">    @each $list in $breakpoint-list &#123;</div><div class=\"line\">        @if nth($list, 1) == $label &#123;</div><div class=\"line\">            @return $list;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @return null;</div><div class=\"line\">&#125;</div><div class=\"line\">$medium-list: get-list(medium);</div></pre></td></tr></table></figure>\n<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>\n<h4 id=\"缺少原生的-Map-函数\"><a href=\"#缺少原生的-Map-函数\" class=\"headerlink\" title=\"缺少原生的 Map 函数\"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>\n<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note unreleased\"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>\n\n<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>\n","categories":[],"tags":["css"]},{"title":"about","url":"https://penguinang.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://penguinang.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://penguinang.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://penguinang.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://penguinang.github.io/tag/index.html","content":"","categories":[],"tags":[]}]